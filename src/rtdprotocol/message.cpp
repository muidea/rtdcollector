//
//
//    This software is provided 'as-is', without any express or implied
//    warranty. In no event will the authors be held liable for any
//    damages arising from the use of this software.
//
//    Generated by mupcompiler.
//
//    Author: muidea@gmail.com
//
//
#include "message.h"

namespace RtdPrococol {

Head::Head()
{
}

Head::~Head()
{
}

bool Head::encode(void* pBuffPtr, UINT32 uBuffSize, UINT32& uRemainSize) const
{
    bool bRet = true;
    UINT32 uPacketSize = calcSize();
    if (uBuffSize < uPacketSize) {
        return false;
    }
    uRemainSize = uBuffSize;
    bRet = MUPProtocol::encode(uPacketSize, (char*)pBuffPtr + uBuffSize - uRemainSize, uRemainSize, uRemainSize);
    if (!bRet) {
        return bRet;
    }

    MUPProtocol::encode(_version, (char*)pBuffPtr + uBuffSize - uRemainSize, uRemainSize, uRemainSize);
    if (!bRet) {
        return bRet;
    }

    MUPProtocol::encode(_commandCode, (char*)pBuffPtr + uBuffSize - uRemainSize, uRemainSize, uRemainSize);
    if (!bRet) {
        return bRet;
    }

    MUPProtocol::encode(_serialNo, (char*)pBuffPtr + uBuffSize - uRemainSize, uRemainSize, uRemainSize);
    if (!bRet) {
        return bRet;
    }

    return bRet;
}

bool Head::decode(const void* pDataPtr, UINT32 uDataSize, UINT32& uRemainSize)
{
    bool bRet = true;
    UINT32 uPacketSize = 0;
    uRemainSize = uDataSize;
    bRet = MUPProtocol::decode((char*)pDataPtr + uDataSize - uRemainSize, uRemainSize, uPacketSize, uRemainSize);
    if (!bRet || (uPacketSize > uDataSize)) {
        return bRet;
    }

    MUPProtocol::decode((char*)pDataPtr + uDataSize - uRemainSize, uRemainSize, _version, uRemainSize);
    if (!bRet) {
        return bRet;
    }

    MUPProtocol::decode((char*)pDataPtr + uDataSize - uRemainSize, uRemainSize, _commandCode, uRemainSize);
    if (!bRet) {
        return bRet;
    }

    MUPProtocol::decode((char*)pDataPtr + uDataSize - uRemainSize, uRemainSize, _serialNo, uRemainSize);
    if (!bRet) {
        return bRet;
    }

    uRemainSize = uDataSize - uPacketSize;
    return bRet;
}

UINT32 Head::calcSize() const
{
    UINT32 uRet = sizeof(UINT32);
    uRet += MUPProtocol::getSize(_version);
    uRet += MUPProtocol::getSize(_commandCode);
    uRet += MUPProtocol::getSize(_serialNo);

    return uRet;
}


}

